[["index.html", "Visualizing Data Patterns with Python and R ", " Visualizing Data Patterns with Python and R Last updated: July 06, 2025 "],["welcome-to-the-general-data-science-visualization-viz-layer.html", "Welcome to the General Data Science – Visualization (VIZ) Layer 📘 What You’ll Learn 🌟 Turn Data Into Insight", " Welcome to the General Data Science – Visualization (VIZ) Layer Welcome back to Complex Data Insights (CDI) — where data science is taught through question-driven learning and hands-on code examples. This layer focuses on Data Visualization — the art of turning raw data into clear, compelling visuals that reveal insights and support decisions. Using both Python and R, you’ll learn to: Create essential plot types Compare groups and detect trends Make your charts both beautiful and informative 📘 What You’ll Learn Each Q&amp;A builds visual literacy through: ✅ Code examples using matplotlib, seaborn, and ggplot2 📊 Visual storytelling techniques 💡 Best practices for interpreting and presenting results You’ll explore how to: Build histograms, boxplots, scatter plots, and more Customize plots with labels, colors, and themes Export visuals for presentations, reports, or dashboards 🌟 Turn Data Into Insight In this layer, you’ll go beyond numbers and learn to communicate findings effectively — one Q&amp;A at a time. Let’s begin 👉📊 "],["what-are-common-data-types-in-python-and-r.html", "Q&A 1 What are common data types in Python and R? 1.1 Explanation 1.2 Common Data Types in Python and R", " Q&A 1 What are common data types in Python and R? 1.1 Explanation Before you clean, visualize, or model data, it’s important to understand what types of values you’re working with — numeric, text, logical, or otherwise. These data types affect how values are stored, displayed, and processed in both Python and R — and they play a major role in how functions behave. 1.2 Common Data Types in Python and R Concept Python (pandas / base) R (base) Notes Integer int integer Use astype(int) or as.integer() Decimal Number float numeric, double numeric is typically double in R Text / String str, object (pandas) character Use astype(str) or as.character() Logical / Boolean bool logical True/False in Python, TRUE/FALSE in R Date / Time datetime64[ns] Date, POSIXct Use pd.to_datetime() or as.Date() Category category factor Ideal for grouping and modeling Missing Values NaN NA Use pd.isna() or is.na() Complex Numbers complex complex Rare in typical data work List list list Flexible containers Dictionary dict named list, list() R lists can mimic dictionaries Tuple tuple c(), list() No exact match — use vectors or lists ✅ Knowing the common data types — and how to interpret them — lays the foundation for all future data work. "],["how-do-you-inspect-variable-types-in-a-dataset.html", "Q&A 2 How do you inspect variable types in a dataset? 2.1 Explanation 2.2 Python Code 2.3 R Code", " Q&A 2 How do you inspect variable types in a dataset? 2.1 Explanation Once you’ve loaded your dataset, the next step is to inspect the structure and confirm the variable types. This helps you: Understand what you’re working with Catch mismatches (e.g., numbers stored as strings) Decide whether conversions are needed 2.2 Python Code import seaborn as sns import pandas as pd # Load and sample the diamonds dataset df_full = sns.load_dataset(&quot;diamonds&quot;) df = df_full.sample(n=500, random_state=42) # Inspect the shape print(&quot;📐 Dataset Shape:&quot;, df.shape) # Preview the first few rows print(&quot;\\n🔍 Dataset Preview:&quot;) print(df.head()) # Check data types print(&quot;\\n🔠 Variable Types:&quot;) print(df.dtypes) 📐 Dataset Shape: (500, 10) 🔍 Dataset Preview: carat cut color clarity depth table price x y z 1388 0.24 Ideal G VVS1 62.1 56.0 559 3.97 4.00 2.47 50052 0.58 Very Good F VVS2 60.0 57.0 2201 5.44 5.42 3.26 41645 0.40 Ideal E VVS2 62.1 55.0 1238 4.76 4.74 2.95 42377 0.43 Premium E VVS2 60.8 57.0 1304 4.92 4.89 2.98 17244 1.55 Ideal E SI2 62.3 55.0 6901 7.44 7.37 4.61 🔠 Variable Types: carat float64 cut category color category clarity category depth float64 table float64 price int64 x float64 y float64 z float64 dtype: object 2.3 R Code library(ggplot2) library(dplyr) # Load and sample the diamonds dataset set.seed(42) df &lt;- ggplot2::diamonds %&gt;% sample_n(500) # Check dimensions cat(&quot;📐 Dataset Dimensions:&quot;, dim(df)[1], &quot;rows x&quot;, dim(df)[2], &quot;columns\\n\\n&quot;) 📐 Dataset Dimensions: 500 rows x 10 columns # Preview the dataset cat(&quot;🔍 Dataset Preview:\\n&quot;) 🔍 Dataset Preview: print(head(df)) # A tibble: 6 × 10 carat cut color clarity depth table price x y z &lt;dbl&gt; &lt;ord&gt; &lt;ord&gt; &lt;ord&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 0.39 Ideal I VVS2 60.8 56 849 4.74 4.76 2.89 2 1.12 Very Good G SI2 63.3 58 4478 6.7 6.63 4.22 3 0.51 Very Good G VVS2 62.9 57 1750 5.06 5.12 3.2 4 0.52 Very Good D VS1 62.5 57 1829 5.11 5.16 3.21 5 0.28 Very Good E VVS2 61.4 55 612 4.22 4.25 2.6 6 1.01 Fair F SI1 67.2 60 4276 6.06 6 4.05 # Inspect variable types cat(&quot;\\n🔠 Variable Types:\\n&quot;) 🔠 Variable Types: str(df) tibble [500 × 10] (S3: tbl_df/tbl/data.frame) $ carat : num [1:500] 0.39 1.12 0.51 0.52 0.28 1.01 0.4 0.9 0.33 0.71 ... $ cut : Ord.factor w/ 5 levels &quot;Fair&quot;&lt;&quot;Good&quot;&lt;..: 5 3 3 3 3 1 3 5 5 4 ... $ color : Ord.factor w/ 7 levels &quot;D&quot;&lt;&quot;E&quot;&lt;&quot;F&quot;&lt;&quot;G&quot;&lt;..: 6 4 4 1 2 3 1 1 4 4 ... $ clarity: Ord.factor w/ 8 levels &quot;I1&quot;&lt;&quot;SI2&quot;&lt;&quot;SI1&quot;&lt;..: 6 2 6 5 6 3 5 3 7 4 ... $ depth : num [1:500] 60.8 63.3 62.9 62.5 61.4 67.2 60.8 62.1 62 62.1 ... $ table : num [1:500] 56 58 57 57 55 60 59 57 55 62 ... $ price : int [1:500] 849 4478 1750 1829 612 4276 954 4523 838 2623 ... $ x : num [1:500] 4.74 6.7 5.06 5.11 4.22 6.06 4.74 6.18 4.45 5.71 ... $ y : num [1:500] 4.76 6.63 5.12 5.16 4.25 6 4.76 6.25 4.49 5.65 ... $ z : num [1:500] 2.89 4.22 3.2 3.21 2.6 4.05 2.89 3.86 2.77 3.53 ... ✅ Always check the variable types before analysis — it helps prevent errors, ensures correct plotting and modeling behavior, and guides you in converting variables where needed (e.g., from text to category or numeric). "],["how-do-you-convert-variable-types-in-a-dataset.html", "Q&A 3 How do you convert variable types in a dataset? 3.1 Explanation 3.2 Python Code 3.3 R Code", " Q&A 3 How do you convert variable types in a dataset? 3.1 Explanation Before visualizing or modeling your data, it’s important to ensure that each variable has the correct type. For example: Categorical variables (like cut, color, clarity) should be treated as factors or categories Numerical variables accidentally stored as strings should be converted to numeric types In this example, we’ll use a sample of 500 diamonds to demonstrate how to inspect and convert variable types where needed — a crucial step for grouped plots and modeling accuracy. 3.2 Python Code import seaborn as sns import pandas as pd # Load and sample the diamonds dataset df_full = sns.load_dataset(&quot;diamonds&quot;) df = df_full.sample(n=500, random_state=42) # Convert selected columns to categorical categorical_cols = [&quot;cut&quot;, &quot;color&quot;, &quot;clarity&quot;] for col in categorical_cols: df[col] = df[col].astype(&quot;category&quot;) # Confirm data types print(&quot;🔠 Updated Variable Types:\\n&quot;) print(df.dtypes) 🔠 Updated Variable Types: carat float64 cut category color category clarity category depth float64 table float64 price int64 x float64 y float64 z float64 dtype: object 3.3 R Code library(ggplot2) library(dplyr) # Load and sample the diamonds dataset set.seed(42) df &lt;- ggplot2::diamonds %&gt;% sample_n(500) # Convert selected columns to factor df &lt;- df %&gt;% mutate( cut = as.factor(cut), color = as.factor(color), clarity = as.factor(clarity) ) # Confirm structure cat(&quot;🔠 Updated Variable Types:\\n&quot;) 🔠 Updated Variable Types: str(df) tibble [500 × 10] (S3: tbl_df/tbl/data.frame) $ carat : num [1:500] 0.39 1.12 0.51 0.52 0.28 1.01 0.4 0.9 0.33 0.71 ... $ cut : Ord.factor w/ 5 levels &quot;Fair&quot;&lt;&quot;Good&quot;&lt;..: 5 3 3 3 3 1 3 5 5 4 ... $ color : Ord.factor w/ 7 levels &quot;D&quot;&lt;&quot;E&quot;&lt;&quot;F&quot;&lt;&quot;G&quot;&lt;..: 6 4 4 1 2 3 1 1 4 4 ... $ clarity: Ord.factor w/ 8 levels &quot;I1&quot;&lt;&quot;SI2&quot;&lt;&quot;SI1&quot;&lt;..: 6 2 6 5 6 3 5 3 7 4 ... $ depth : num [1:500] 60.8 63.3 62.9 62.5 61.4 67.2 60.8 62.1 62 62.1 ... $ table : num [1:500] 56 58 57 57 55 60 59 57 55 62 ... $ price : int [1:500] 849 4478 1750 1829 612 4276 954 4523 838 2623 ... $ x : num [1:500] 4.74 6.7 5.06 5.11 4.22 6.06 4.74 6.18 4.45 5.71 ... $ y : num [1:500] 4.76 6.63 5.12 5.16 4.25 6 4.76 6.25 4.49 5.65 ... $ z : num [1:500] 2.89 4.22 3.2 3.21 2.6 4.05 2.89 3.86 2.77 3.53 ... ✅ Ensuring correct variable types improves how your data is visualized, summarized, and modeled — especially when working with grouped plots or categorical aesthetics. "],["what-is-the-difference-between-categorical-and-numerical-variables.html", "Q&A 4 What is the difference between categorical and numerical variables? 4.1 Explanation", " Q&A 4 What is the difference between categorical and numerical variables? 4.1 Explanation In data analysis, variables are typically classified into two major types: 4.1.1 🔷 Categorical Variables These represent groups, labels, or categories. They describe qualities, not quantities. Nominal: Categories with no natural order Example: \"red\", \"blue\", \"green\" Ordinal: Categories with a meaningful order Example: \"low\", \"medium\", \"high\" 4.1.2 🔶 Numerical Variables These represent measurable quantities and describe how much or how many. Discrete: Countable, whole-number values Example: Number of children, cars, books Continuous: Measurable on a scale; can take any value within a range Example: Height, weight, temperature Correctly identifying variable types is critical. It informs the choice of: - Statistical methods (e.g., t-tests vs chi-squared tests) - Visualizations (e.g., histograms for continuous vs bar plots for categorical) - Feature encoding in machine learning (e.g., one-hot encoding for nominal variables) "],["how-do-you-summarize-numerical-and-categorical-variables.html", "Q&A 5 How do you summarize numerical and categorical variables? 5.1 Explanation 5.2 Python Code 5.3 R Code", " Q&A 5 How do you summarize numerical and categorical variables? 5.1 Explanation Summarizing variables helps you quickly understand data distribution, central tendency, and variation — essential before any visualization. Numerical variables: We summarize using measures like mean, median, standard deviation, min, max, and percentiles. Categorical variables: We summarize by counting the frequency of each category. Here we use a sample of 500 diamonds for fast, clear summaries. 5.2 Python Code import seaborn as sns import pandas as pd # Load and sample the diamonds dataset df_full = sns.load_dataset(&quot;diamonds&quot;) df = df_full.sample(n=500, random_state=42) # Summary of numerical variables print(&quot;📊 Summary of Numerical Variables:\\n&quot;) print(df.describe()) # Frequency count of categorical variables print(&quot;\\n🔠 Frequency of Categorical Variables:\\n&quot;) for col in [&quot;cut&quot;, &quot;color&quot;, &quot;clarity&quot;]: print(f&quot;\\n{col}:\\n&quot;, df[col].value_counts()) 📊 Summary of Numerical Variables: carat depth table price x \\ count 500.000000 500.000000 500.000000 500.000000 500.000000 mean 0.834520 61.753800 57.255600 4243.838000 5.807500 std 0.504862 1.395428 2.185484 4321.650221 1.173615 min 0.230000 55.200000 53.000000 373.000000 3.900000 25% 0.400000 61.100000 56.000000 955.250000 4.730000 50% 0.720000 61.900000 57.000000 2665.000000 5.770000 75% 1.090000 62.600000 59.000000 5508.500000 6.605000 max 2.750000 67.100000 66.000000 18803.000000 9.040000 y z count 500.000000 500.000000 mean 5.806940 3.584380 std 1.167344 0.719462 min 3.940000 2.430000 25% 4.730000 2.930000 50% 5.780000 3.555000 75% 6.595000 4.070000 max 8.980000 5.490000 🔠 Frequency of Categorical Variables: cut: cut Ideal 200 Premium 131 Very Good 115 Good 41 Fair 13 Name: count, dtype: int64 color: color E 109 F 103 G 98 H 75 D 48 I 43 J 24 Name: count, dtype: int64 clarity: clarity SI1 123 VS2 107 SI2 93 VS1 66 VVS2 52 VVS1 33 IF 17 I1 9 Name: count, dtype: int64 5.3 R Code library(ggplot2) library(dplyr) # Load and sample the diamonds dataset set.seed(42) df &lt;- ggplot2::diamonds %&gt;% sample_n(500) # Summary of numerical variables cat(&quot;📊 Summary of Numerical Variables:\\n&quot;) 📊 Summary of Numerical Variables: summary(select(df, where(is.numeric))) carat depth table price Min. :0.2300 Min. :56.10 Min. :52.00 Min. : 345.0 1st Qu.:0.4000 1st Qu.:61.10 1st Qu.:56.00 1st Qu.: 971.8 Median :0.7200 Median :61.95 Median :57.00 Median : 2652.5 Mean :0.8133 Mean :61.85 Mean :57.41 Mean : 3951.3 3rd Qu.:1.0400 3rd Qu.:62.60 3rd Qu.:59.00 3rd Qu.: 5134.5 Max. :3.0000 Max. :68.80 Max. :66.00 Max. :18493.0 x y z Min. :3.920 Min. :3.940 Min. :2.410 1st Qu.:4.725 1st Qu.:4.710 1st Qu.:2.917 Median :5.780 Median :5.790 Median :3.570 Mean :5.766 Mean :5.765 Mean :3.566 3rd Qu.:6.520 3rd Qu.:6.490 3rd Qu.:4.032 Max. :9.320 Max. :9.190 Max. :5.500 # Frequency count of categorical variables cat(&quot;\\n🔠 Frequency of Categorical Variables:\\n&quot;) 🔠 Frequency of Categorical Variables: df %&gt;% select(cut, color, clarity) %&gt;% summarise(across(everything(), ~ list(table(.)))) # A tibble: 1 × 3 cut color clarity &lt;list&gt; &lt;list&gt; &lt;list&gt; 1 &lt;table [5]&gt; &lt;table [7]&gt; &lt;table [8]&gt; ✅ Summarizing your variables helps reveal patterns, detect outliers, and identify potential problems — all before you create your first plot. "],["what-are-the-most-effective-plots-for-comparing-values-across-categories.html", "Q&A 6 What are the most effective plots for comparing values across categories? 6.1 Explanation", " Q&A 6 What are the most effective plots for comparing values across categories? 6.1 Explanation Before diving into specific charts, it’s helpful to understand the landscape of visualization tools available when comparing a numeric variable across different groups (i.e., categorical levels). Depending on what insight you’re after — distribution shape, summary statistics, or raw values — the best choice will vary. 🔹 Common Visualization Types Plot Type Shows Distribution Best For Bar Plot ❌ No Comparing total counts or group means Histogram ✅ Yes (1 group) Viewing frequency distribution Density Plot ✅ Yes Smooth shape of distribution Box Plot ✅ Yes Spread, center, and outliers Violin Plot ✅ Yes Shape + quartiles Ridge Plot ✅ Yes Comparing shapes across many groups Strip Plot ✅ Yes Raw points (ideal for small datasets) Swarm Plot ✅ Yes Raw data with spacing Dot Plot ❌ Summary only Central tendency with optional error bars Bar + Error Bars ❌ Summary only Means with uncertainty (CI/SE bars) 📌 Choosing the Right Plot Ask yourself: How many groups are you comparing? Is the dataset small or large? Do you want to show individual points or a summary? Is distribution shape important? Start with simple visuals like bar plots and box plots. Use richer plots (like violin or ridge) when you want to uncover deeper patterns. ✅ Takeaway: Choosing the right visual makes patterns across categories easier to see — and ensures your insights are both accurate and easy to communicate. "],["how-do-you-visualize-category-counts-using-a-bar-plot.html", "Q&A 7 How do you visualize category counts using a bar plot? 7.1 Explanation 7.2 Python Code 7.3 R Code", " Q&A 7 How do you visualize category counts using a bar plot? 7.1 Explanation A count plot (also known as a categorical bar plot) shows how many observations fall into each category. It is ideal for quickly assessing the distribution of categorical variables such as species, cut, or class. You can enhance the plot by: Adding color (hue) to show subgroup breakdown Applying professional palettes like Set2, viridis, or rainbow Ordering bars by count or category level Adding labels to each bar for clarity 7.2 Python Code import pandas as pd import seaborn as sns import matplotlib.pyplot as plt # Load dataset iris = pd.read_csv(&quot;data/iris.csv&quot;) # Set aesthetic style sns.set(style=&quot;whitegrid&quot;) # Base count plot with beautiful palette plt.figure(figsize=(8, 6)) sns.countplot(data=iris, x=&quot;species&quot;, palette=&quot;Set2&quot;) plt.title(&quot;Count Plot of Iris Species&quot;, fontsize=14) plt.xlabel(&quot;Species&quot;) plt.ylabel(&quot;Count&quot;) plt.tight_layout() plt.show() # Count plot with hue: bin sepal_length iris[&quot;sepal_length_bin&quot;] = pd.cut(iris[&quot;sepal_length&quot;], bins=3, labels=[&quot;Short&quot;, &quot;Medium&quot;, &quot;Long&quot;]) plt.figure(figsize=(8, 6)) sns.countplot(data=iris, x=&quot;species&quot;, hue=&quot;sepal_length_bin&quot;, palette=&quot;viridis&quot;) plt.title(&quot;Count Plot with Hue (Sepal Length Bin)&quot;, fontsize=14) plt.xlabel(&quot;Species&quot;) plt.ylabel(&quot;Count&quot;) plt.tight_layout() plt.show() /var/folders/m1/0dxpqygn2ds41kxkjgwtftr00000gn/T/ipykernel_75563/3693477444.py:13: FutureWarning: Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect. sns.countplot(data=iris, x=&quot;species&quot;, palette=&quot;Set2&quot;) 7.3 R Code library(readr) library(ggplot2) library(dplyr) library(viridis) # Load dataset iris &lt;- read_csv(&quot;data/iris.csv&quot;) # Base count plot ggplot(iris, aes(x = species)) + geom_bar(fill = &quot;steelblue&quot;) + theme_minimal() + labs(title = &quot;Count Plot of Iris Species&quot;, x = &quot;Species&quot;, y = &quot;Count&quot;) # Count plot with hue: bin sepal_length iris &lt;- iris %&gt;% mutate(sepal_length_bin = cut(sepal_length, breaks = 3, labels = c(&quot;Short&quot;, &quot;Medium&quot;, &quot;Long&quot;))) ggplot(iris, aes(x = species, fill = sepal_length_bin)) + geom_bar(position = &quot;dodge&quot;) + scale_fill_viridis_d(option = &quot;C&quot;) + theme_minimal() + labs(title = &quot;Count Plot with Hue (Sepal Length Bin)&quot;, x = &quot;Species&quot;, y = &quot;Count&quot;, fill = &quot;Sepal Length Bin&quot;) ✅ Count plots provide a clear and colorful summary of category sizes. Using hue and palettes enhances clarity, making group comparisons more informative and visually appealing. "],["how-do-you-compare-group-distributions-using-a-boxplot.html", "Q&A 8 How do you compare group distributions using a boxplot? 8.1 Explanation 8.2 Python Code 8.3 R Code", " Q&A 8 How do you compare group distributions using a boxplot? 8.1 Explanation A boxplot is a standard way to visualize the distribution of a numerical variable across categories. It summarizes key statistics: Median (central line) Interquartile range (IQR) (box edges) Minimum and maximum (whiskers) Outliers (points outside whiskers) Boxplots are ideal for detecting: Differences in central tendency Variation in spread Presence of outliers Asymmetry or skewness in the distribution Adding color and overlaying raw data (e.g., strip plots) improves interpretability. 8.2 Python Code import pandas as pd import seaborn as sns import matplotlib.pyplot as plt # Load dataset iris = pd.read_csv(&quot;data/iris.csv&quot;) # Set style sns.set(style=&quot;whitegrid&quot;) # Basic boxplot plt.figure(figsize=(8, 6)) sns.boxplot(data=iris, x=&quot;species&quot;, y=&quot;sepal_length&quot;, palette=&quot;viridis&quot;) plt.title(&quot;Boxplot: Sepal Length by Species&quot;, fontsize=14) plt.xlabel(&quot;Species&quot;) plt.ylabel(&quot;Sepal Length&quot;) plt.tight_layout() plt.show() # Boxplot with overlaid strip plot (raw points) plt.figure(figsize=(8, 6)) sns.boxplot(data=iris, x=&quot;species&quot;, y=&quot;sepal_length&quot;, palette=&quot;viridis&quot;, width=0.6) sns.stripplot(data=iris, x=&quot;species&quot;, y=&quot;sepal_length&quot;, color=&quot;black&quot;, alpha=0.5, jitter=True) plt.title(&quot;Boxplot with Raw Points: Sepal Length by Species&quot;, fontsize=14) plt.tight_layout() plt.show() /var/folders/m1/0dxpqygn2ds41kxkjgwtftr00000gn/T/ipykernel_75563/1537151029.py:13: FutureWarning: Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect. sns.boxplot(data=iris, x=&quot;species&quot;, y=&quot;sepal_length&quot;, palette=&quot;viridis&quot;) /var/folders/m1/0dxpqygn2ds41kxkjgwtftr00000gn/T/ipykernel_75563/1537151029.py:22: FutureWarning: Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect. sns.boxplot(data=iris, x=&quot;species&quot;, y=&quot;sepal_length&quot;, palette=&quot;viridis&quot;, width=0.6) 8.3 R Code library(readr) library(ggplot2) # Load dataset iris &lt;- read_csv(&quot;data/iris.csv&quot;) # Basic boxplot ggplot(iris, aes(x = species, y = sepal_length)) + geom_boxplot(fill = &quot;lightblue&quot;, color = &quot;black&quot;) + theme_minimal() + labs(title = &quot;Boxplot: Sepal Length by Species&quot;, x = &quot;Species&quot;, y = &quot;Sepal Length&quot;) # Boxplot with overlaid jittered points ggplot(iris, aes(x = species, y = sepal_length)) + geom_boxplot(fill = &quot;lightgreen&quot;, outlier.shape = NA) + geom_jitter(color = &quot;black&quot;, width = 0.2, alpha = 0.5) + theme_minimal() + labs(title = &quot;Boxplot with Raw Points: Sepal Length by Species&quot;, x = &quot;Species&quot;, y = &quot;Sepal Length&quot;) ✅ Boxplots offer a compact summary of distribution and spread for each category. When enhanced with color and raw points, they reveal both statistical structure and individual variation clearly. "],["how-do-you-compare-distribution-shape-and-summary-stats-using-a-violin-plot.html", "Q&A 9 How do you compare distribution shape and summary stats using a violin plot? 9.1 Explanation 9.2 Python Code 9.3 R Code", " Q&A 9 How do you compare distribution shape and summary stats using a violin plot? 9.1 Explanation A violin plot combines the benefits of a boxplot and a density plot. It shows: The kernel density estimate of the data distribution (mirrored on both sides) Median and IQR through an embedded boxplot The width of the violin reflects the frequency of values This makes violin plots ideal when you want to explore both: - Shape and modality of the distribution - Statistical summaries like median and quartiles Using color palettes and overlaying a boxplot improves clarity and visual appeal. 9.2 Python Code import pandas as pd import seaborn as sns import matplotlib.pyplot as plt # Load dataset iris = pd.read_csv(&quot;data/iris.csv&quot;) # Set theme sns.set(style=&quot;whitegrid&quot;) # Violin plot with boxplot in the center plt.figure(figsize=(8, 6)) sns.violinplot(data=iris, x=&quot;species&quot;, y=&quot;sepal_length&quot;, inner=&quot;box&quot;, palette=&quot;Set2&quot;) plt.title(&quot;Violin Plot with Boxplot: Sepal Length by Species&quot;, fontsize=14) plt.xlabel(&quot;Species&quot;) plt.ylabel(&quot;Sepal Length&quot;) plt.tight_layout() plt.show() /var/folders/m1/0dxpqygn2ds41kxkjgwtftr00000gn/T/ipykernel_75563/471915172.py:13: FutureWarning: Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect. sns.violinplot(data=iris, x=&quot;species&quot;, y=&quot;sepal_length&quot;, inner=&quot;box&quot;, palette=&quot;Set2&quot;) 9.3 R Code library(readr) library(ggplot2) # Load dataset iris &lt;- read_csv(&quot;data/iris.csv&quot;) # Violin plot with embedded boxplot ggplot(iris, aes(x = species, y = sepal_length, fill = species)) + geom_violin(trim = FALSE, color = &quot;gray40&quot;) + geom_boxplot(width = 0.1, color = &quot;black&quot;, outlier.shape = NA) + scale_fill_brewer(palette = &quot;Set2&quot;) + theme_minimal() + labs(title = &quot;Violin Plot with Boxplot: Sepal Length by Species&quot;, x = &quot;Species&quot;, y = &quot;Sepal Length&quot;) ✅ Violin plots are powerful for visualizing both distribution shape and group-level statistics. The embedded boxplot helps interpret quartiles, while the violin shape reveals modality and spread. "],["how-do-you-visualize-overlapping-group-distributions-using-a-ridge-plot.html", "Q&A 10 How do you visualize overlapping group distributions using a ridge plot? 10.1 Explanation 10.2 Python Code 10.3 R Code", " Q&A 10 How do you visualize overlapping group distributions using a ridge plot? 10.1 Explanation A ridge plot (also called a joyplot) displays smoothed density curves for a numerical variable across different groups. The curves are stacked and partially overlapping, making it easy to: Compare the shape of distributions Detect skewness, modality, and spread Handle many groups in a compact space These plots are especially useful in Exploratory Data Analysis (EDA) when you want to: Compare distributions across levels of a categorical variable Reveal subtle differences in group behavior Highlight the overall distribution pattern clearly 10.2 Python Code import pandas as pd import seaborn as sns import matplotlib.pyplot as plt # Load dataset iris = pd.read_csv(&quot;data/iris.csv&quot;) # Set theme sns.set(style=&quot;white&quot;) # Create ridge-style KDE plot manually plt.figure(figsize=(8, 6)) species_list = iris[&quot;species&quot;].unique() for i, species in enumerate(species_list): subset = iris[iris[&quot;species&quot;] == species] sns.kdeplot( subset[&quot;sepal_length&quot;], fill=True, label=species, linewidth=1.5, alpha=0.7, clip=(4, 8), ) plt.title(&quot;Ridge-style KDE Plot: Sepal Length by Species&quot;, fontsize=14) plt.xlabel(&quot;Sepal Length&quot;) plt.ylabel(&quot;Density&quot;) plt.legend(title=&quot;Species&quot;) plt.tight_layout() plt.show() 10.3 R Code library(readr) library(ggplot2) library(ggridges) library(viridis) # Load dataset iris &lt;- read_csv(&quot;data/iris.csv&quot;) # Ridge plot using ggridges ggplot(iris, aes(x = sepal_length, y = species, fill = species)) + geom_density_ridges(scale = 1.2, alpha = 0.7, color = &quot;white&quot;) + scale_fill_viridis_d(option = &quot;D&quot;) + theme_minimal() + labs(title = &quot;Ridge Plot: Sepal Length by Species&quot;, x = &quot;Sepal Length&quot;, y = &quot;Species&quot;) ✅ Ridge plots provide a smooth, elegant comparison of multiple distributions. They’re especially useful when working with several categories and aiming to uncover differences in shape or spread. "],["how-do-you-display-individual-data-points-by-category-using-a-swarm-plot.html", "Q&A 11 How do you display individual data points by category using a swarm plot? 11.1 Explanation 11.2 Python Code 11.3 R Code", " Q&A 11 How do you display individual data points by category using a swarm plot? 11.1 Explanation A swarm plot displays individual data points while intelligently spacing them to avoid overlap. Unlike strip plots (which may stack points randomly), swarm plots use a repulsion algorithm to spread points for better visibility. They are especially helpful when: The dataset is small to medium-sized You want to show raw observations Identifying clusters, gaps, or outliers is important Combining swarm plots with color (hue) and category grouping enhances clarity and storytelling. 11.2 Python Code import pandas as pd import seaborn as sns import matplotlib.pyplot as plt # Load dataset iris = pd.read_csv(&quot;data/iris.csv&quot;) # Set style sns.set(style=&quot;whitegrid&quot;) # Swarm plot plt.figure(figsize=(8, 6)) sns.swarmplot(data=iris, x=&quot;species&quot;, y=&quot;sepal_length&quot;, hue=&quot;species&quot;, palette=&quot;Set2&quot;, dodge=False, size=6) plt.title(&quot;Swarm Plot: Sepal Length by Species&quot;, fontsize=14) plt.xlabel(&quot;Species&quot;) plt.ylabel(&quot;Sepal Length&quot;) plt.tight_layout() plt.show() 11.3 R Code library(readr) library(ggplot2) library(ggbeeswarm) # Load dataset iris &lt;- read_csv(&quot;data/iris.csv&quot;) # Swarm plot using ggbeeswarm::geom_quasirandom ggplot(iris, aes(x = species, y = sepal_length, color = species)) + geom_quasirandom(size = 2.5, width = 0.25) + scale_color_brewer(palette = &quot;Set2&quot;) + theme_minimal() + labs(title = &quot;Swarm Plot: Sepal Length by Species&quot;, x = &quot;Species&quot;, y = &quot;Sepal Length&quot;) ✅ Swarm plots reveal individual data points without overlap, making them ideal for exploring real observations, spotting outliers, and understanding group patterns in moderate-sized datasets. "],["how-do-you-show-raw-observations-by-group-using-a-strip-plot.html", "Q&A 12 How do you show raw observations by group using a strip plot? 12.1 Explanation 12.2 Python Code 12.3 R Code", " Q&A 12 How do you show raw observations by group using a strip plot? 12.1 Explanation A strip plot is a simple yet powerful way to show every individual data point for a numerical variable grouped by a categorical variable. Unlike boxplots or violin plots, which summarize data, strip plots highlight raw measurements. They are best used when: You want complete visibility of individual observations Your dataset is small or moderate in size You want to explore variation and outliers without summary overlays Adding jitter (slight random displacement) and using vibrant palettes makes the visualization more readable and visually engaging. 12.2 Python Code import pandas as pd import seaborn as sns import matplotlib.pyplot as plt # Load dataset iris = pd.read_csv(&quot;data/iris.csv&quot;) # Set style sns.set(style=&quot;whitegrid&quot;) # Warning-free strip plot with hue and palette plt.figure(figsize=(8, 6)) sns.stripplot( data=iris, x=&quot;species&quot;, y=&quot;sepal_length&quot;, hue=&quot;species&quot;, jitter=True, palette=&quot;Set2&quot;, dodge=False, size=6, alpha=0.8 ) plt.title(&quot;Strip Plot: Sepal Length by Species&quot;, fontsize=14) plt.xlabel(&quot;Species&quot;) plt.ylabel(&quot;Sepal Length&quot;) plt.legend([],[], frameon=False) # Hides duplicate legend plt.tight_layout() plt.show() 12.3 R Code library(readr) library(ggplot2) # Load dataset iris &lt;- read_csv(&quot;data/iris.csv&quot;) # Strip plot with jitter and color ggplot(iris, aes(x = species, y = sepal_length, color = species)) + geom_jitter(width = 0.2, size = 2.5, alpha = 0.8) + scale_color_brewer(palette = &quot;Set2&quot;) + theme_minimal() + labs(title = &quot;Strip Plot: Sepal Length by Species&quot;, x = &quot;Species&quot;, y = &quot;Sepal Length&quot;) ✅ Strip plots offer a direct view of all data points in each category. They are perfect for spotting data spread, clusters, or outliers—especially when combined with color and jitter for clarity. "],["how-do-you-show-group-means-and-variability-using-a-bar-plot.html", "Q&A 13 How do you show group means and variability using a bar plot? 13.1 Explanation 13.2 Python Code 13.3 R Code", " Q&A 13 How do you show group means and variability using a bar plot? 13.1 Explanation A bar plot with error bars summarizes numerical data by showing: Mean value for each category as a bar Error bars representing variability (e.g., standard deviation or standard error) This is ideal for comparing central tendencies between groups, especially when: You’ve already summarized your data You want to highlight differences in means Distribution details (e.g., skewness, modality) are less important Adding colors using hue and modern palettes enhances readability and prevents warnings. 13.2 Python Code import pandas as pd import seaborn as sns import matplotlib.pyplot as plt # Load dataset iris = pd.read_csv(&quot;data/iris.csv&quot;) # Set style sns.set(style=&quot;whitegrid&quot;) # Bar plot with error bars (standard deviation), hue to avoid warnings plt.figure(figsize=(8, 6)) sns.barplot( data=iris, x=&quot;species&quot;, y=&quot;sepal_length&quot;, hue=&quot;species&quot;, palette=&quot;Set2&quot;, ci=&quot;sd&quot;, errorbar=&quot;sd&quot;, capsize=0.1 ) plt.title(&quot;Bar Plot with Error Bars: Sepal Length by Species&quot;, fontsize=14) plt.xlabel(&quot;Species&quot;) plt.ylabel(&quot;Mean Sepal Length ± SD&quot;) plt.legend([],[], frameon=False) # Hides duplicate legend plt.tight_layout() plt.show() /var/folders/m1/0dxpqygn2ds41kxkjgwtftr00000gn/T/ipykernel_75563/2750927964.py:13: FutureWarning: The `ci` parameter is deprecated. Use `errorbar=&#39;sd&#39;` for the same effect. sns.barplot( 13.3 R Code library(readr) library(ggplot2) library(dplyr) # Load dataset iris &lt;- read_csv(&quot;data/iris.csv&quot;) # Summarize mean and standard deviation summary_df &lt;- iris %&gt;% group_by(species) %&gt;% summarise( mean_val = mean(sepal_length), sd_val = sd(sepal_length), .groups = &quot;drop&quot; ) # Bar plot with error bars ggplot(summary_df, aes(x = species, y = mean_val, fill = species)) + geom_bar(stat = &quot;identity&quot;, width = 0.6) + geom_errorbar(aes(ymin = mean_val - sd_val, ymax = mean_val + sd_val), width = 0.2) + scale_fill_brewer(palette = &quot;Set2&quot;) + theme_minimal() + labs(title = &quot;Bar Plot with Error Bars: Sepal Length by Species&quot;, x = &quot;Species&quot;, y = &quot;Mean Sepal Length ± SD&quot;) ✅ Bar plots with error bars are great for summarizing group-level differences in means. Using hue or fill ensures correct color mapping and avoids warnings in modern plotting libraries. "],["how-do-you-show-group-summaries-using-a-dot-plot.html", "Q&A 14 How do you show group summaries using a dot plot? 14.1 Explanation 14.2 Python Code 14.3 R Code", " Q&A 14 How do you show group summaries using a dot plot? 14.1 Explanation A dot plot is a simple yet effective way to compare group-level summary statistics, such as the mean price of diamonds per quality grade. It’s particularly helpful when: You want to emphasize central values without clutter The number of groups is moderate You want a clean alternative to a bar chart Dot plots are enhanced with color, size, and error bars for visual clarity. They’re perfect for summary comparisons like mean or median ± standard deviation. 14.2 Python Code import pandas as pd import seaborn as sns import matplotlib.pyplot as plt # Load dataset diamonds = pd.read_csv(&quot;data/diamonds_sample.csv&quot;) # Compute group summary summary_df = diamonds.groupby(&quot;cut&quot;, as_index=False).agg( mean_price=(&quot;price&quot;, &quot;mean&quot;), sd_price=(&quot;price&quot;, &quot;std&quot;) ) # Create dot plot sns.set(style=&quot;whitegrid&quot;) plt.figure(figsize=(8, 6)) sns.pointplot( data=summary_df, x=&quot;cut&quot;, y=&quot;mean_price&quot;, # palette=&quot;Set2&quot;, errorbar=None, join=False, markers=&quot;o&quot; ) # Add error bars manually plt.errorbar( x=range(len(summary_df)), y=summary_df[&quot;mean_price&quot;], yerr=summary_df[&quot;sd_price&quot;], fmt=&#39;none&#39;, capsize=5, color=&#39;black&#39; ) plt.title(&quot;Dot Plot with Error Bars: Diamond Price by Cut&quot;, fontsize=14) plt.xlabel(&quot;Cut&quot;) plt.ylabel(&quot;Mean Price ± SD&quot;) plt.tight_layout() plt.show() /var/folders/m1/0dxpqygn2ds41kxkjgwtftr00000gn/T/ipykernel_75563/1871995440.py:17: UserWarning: The `join` parameter is deprecated and will be removed in v0.15.0. You can remove the line between points with `linestyle=&#39;none&#39;`. sns.pointplot( 14.3 R Code library(readr) library(ggplot2) library(dplyr) # Load dataset diamonds &lt;- read_csv(&quot;data/diamonds_sample.csv&quot;) # Compute mean and SD summary_df &lt;- diamonds %&gt;% group_by(cut) %&gt;% summarise( mean_price = mean(price), sd_price = sd(price), .groups = &quot;drop&quot; ) # Dot plot with error bars ggplot(summary_df, aes(x = cut, y = mean_price, color = cut)) + geom_point(size = 4) + geom_errorbar(aes(ymin = mean_price - sd_price, ymax = mean_price + sd_price), width = 0.2) + scale_color_brewer(palette = &quot;Set2&quot;) + theme_minimal() + labs(title = &quot;Dot Plot with Error Bars: Diamond Price by Cut&quot;, x = &quot;Cut&quot;, y = &quot;Mean Price ± SD&quot;) ✅ Dot plots are a compact, precise way to compare summary statistics across groups. When used with color and error bars, they highlight differences in group means with clarity and elegance. "],["how-do-you-show-frequency-patterns-using-a-histogram.html", "Q&A 15 How do you show frequency patterns using a histogram? 15.1 Explanation 15.2 Python Code 15.3 R Code", " Q&A 15 How do you show frequency patterns using a histogram? 15.1 Explanation A histogram is used to show the frequency distribution of a numerical variable by grouping values into bins. It helps you: Understand the range and shape of a distribution Detect skewness or multi-modality Compare group-level differences using color or faceting For grouped comparisons (e.g., price by cut), it’s common to: Use transparent fills (alpha blending) Use facets to separate overlapping plots Choose appropriate bin width and palettes 15.2 Python Code import pandas as pd import seaborn as sns import matplotlib.pyplot as plt # Load dataset diamonds = pd.read_csv(&quot;data/diamonds_sample.csv&quot;) # Set style sns.set(style=&quot;whitegrid&quot;) # Histogram with hue plt.figure(figsize=(10, 6)) sns.histplot(data=diamonds, x=&quot;price&quot;, hue=&quot;cut&quot;, element=&quot;step&quot;, stat=&quot;density&quot;, common_norm=False, palette=&quot;Set2&quot;, bins=50, alpha=0.6) plt.title(&quot;Histogram of Diamond Price by Cut&quot;, fontsize=14) plt.xlabel(&quot;Price&quot;) plt.ylabel(&quot;Density&quot;) plt.tight_layout() plt.show() 15.3 R Code library(readr) library(ggplot2) # Load dataset diamonds &lt;- read_csv(&quot;data/diamonds_sample.csv&quot;) # Histogram with color fill and transparency ggplot(diamonds, aes(x = price, fill = cut)) + geom_histogram(position = &quot;identity&quot;, bins = 50, alpha = 0.6, color = &quot;black&quot;) + scale_fill_brewer(palette = &quot;Set2&quot;) + theme_minimal() + labs(title = &quot;Histogram of Diamond Price by Cut&quot;, x = &quot;Price&quot;, y = &quot;Count&quot;) ✅ Histograms are ideal for visualizing frequency and shape. By using color or faceting, you can explore how distributions vary across groups like diamond cut. "],["how-do-you-visualize-a-smoothed-distribution-with-a-density-plot.html", "Q&A 16 How do you visualize a smoothed distribution with a density plot? 16.1 Explanation 16.2 Python Code 16.3 R Code", " Q&A 16 How do you visualize a smoothed distribution with a density plot? 16.1 Explanation A density plot shows the probability density of a continuous variable using a smoothed curve. Compared to histograms, it offers: A more refined view of distribution shape Insight into skewness, peaks, and spread Easy group comparison using hue or facets For grouped densities (e.g., price by cut), you can: Use fill and hue for comparison Overlay multiple groups for contrast Normalize to show relative densities 16.2 Python Code import pandas as pd import seaborn as sns import matplotlib.pyplot as plt # Load dataset diamonds = pd.read_csv(&quot;data/diamonds_sample.csv&quot;) # Set style sns.set(style=&quot;white&quot;) # Density plot with hue plt.figure(figsize=(10, 6)) sns.kdeplot(data=diamonds, x=&quot;price&quot;, hue=&quot;cut&quot;, fill=True, alpha=0.6, palette=&quot;Set2&quot;, common_norm=False) plt.title(&quot;Density Plot of Diamond Price by Cut&quot;, fontsize=14) plt.xlabel(&quot;Price&quot;) plt.ylabel(&quot;Density&quot;) plt.tight_layout() plt.show() 16.3 R Code library(readr) library(ggplot2) # Load dataset diamonds &lt;- read_csv(&quot;data/diamonds_sample.csv&quot;) # Density plot ggplot(diamonds, aes(x = price, fill = cut)) + geom_density(alpha = 0.6) + scale_fill_brewer(palette = &quot;Set2&quot;) + theme_minimal() + labs(title = &quot;Density Plot of Diamond Price by Cut&quot;, x = &quot;Price&quot;, y = &quot;Density&quot;) ✅ Density plots provide a smooth view of distributions. They are excellent for comparing shape, spread, and modality across groups—especially when overlaid with vibrant palettes. "],["how-do-you-visualize-two-categorical-variables-with-a-grouped-bar-plot.html", "Q&A 17 How do you visualize two categorical variables with a grouped bar plot? 17.1 Explanation 17.2 Python Code 17.3 R Code", " Q&A 17 How do you visualize two categorical variables with a grouped bar plot? 17.1 Explanation A grouped bar plot allows you to compare two categorical variables simultaneously by showing side-by-side bars within each group. This is ideal when: You want to analyze proportions or counts across two categorical dimensions You need a clean comparison without stacking Each group has a manageable number of levels 17.2 Python Code import pandas as pd import seaborn as sns import matplotlib.pyplot as plt # Load dataset diamonds = pd.read_csv(&quot;data/diamonds_sample.csv&quot;) # Set style sns.set(style=&quot;whitegrid&quot;) # Grouped bar plot: count of cut across clarity levels plt.figure(figsize=(10, 6)) sns.countplot(data=diamonds, x=&quot;clarity&quot;, hue=&quot;cut&quot;, palette=&quot;Set2&quot;) plt.title(&quot;Grouped Bar Plot: Diamond Cut by Clarity&quot;, fontsize=14) plt.xlabel(&quot;Clarity&quot;) plt.ylabel(&quot;Count&quot;) plt.tight_layout() plt.show() 17.3 R Code library(readr) library(ggplot2) # Load dataset diamonds &lt;- read_csv(&quot;data/diamonds_sample.csv&quot;) # Grouped bar plot ggplot(diamonds, aes(x = clarity, fill = cut)) + geom_bar(position = &quot;dodge&quot;) + scale_fill_brewer(palette = &quot;Set2&quot;) + theme_minimal() + labs(title = &quot;Grouped Bar Plot: Diamond Cut by Clarity&quot;, x = &quot;Clarity&quot;, y = &quot;Count&quot;) ✅ Grouped bar plots allow clean comparison across two categorical dimensions. They’re especially useful for understanding distribution patterns in grouped data. "],["how-do-you-visualize-trends-across-ordered-groups-using-a-line-plot.html", "Q&A 18 How do you visualize trends across ordered groups using a line plot? 18.1 Explanation 18.2 Python Code 18.3 R Code", " Q&A 18 How do you visualize trends across ordered groups using a line plot? 18.1 Explanation A line plot is typically used for time series, but you can also use it to show changes over any ordered numeric variable. In this case, we’ll group diamonds by carat bins and compute the mean price. This allows us to simulate a trend and observe how price changes with carat. This type of plot is useful for: Showing trends or gradual change across bins Comparing multiple features over a common x-axis Visualizing aggregated patterns from large datasets 18.2 Python Code import pandas as pd import matplotlib.pyplot as plt # Load data df = pd.read_csv(&quot;data/diamonds_sample.csv&quot;) # Bin carat into equal-width intervals df[&quot;carat_bin&quot;] = pd.cut(df[&quot;carat&quot;], bins=10) # Compute mean price per carat bin mean_price = df.groupby(&quot;carat_bin&quot;)[&quot;price&quot;].mean().reset_index() # Convert bin labels to midpoints for plotting mean_price[&quot;carat_mid&quot;] = mean_price[&quot;carat_bin&quot;].apply(lambda x: x.mid) # Plot plt.plot(mean_price[&quot;carat_mid&quot;], mean_price[&quot;price&quot;], marker=&quot;o&quot;) plt.xlabel(&quot;Carat (binned)&quot;) plt.ylabel(&quot;Mean Price&quot;) plt.title(&quot;Trend of Price by Carat (Binned)&quot;) plt.grid(True) plt.tight_layout() plt.show() /var/folders/m1/0dxpqygn2ds41kxkjgwtftr00000gn/T/ipykernel_75563/1324421104.py:11: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning. mean_price = df.groupby(&quot;carat_bin&quot;)[&quot;price&quot;].mean().reset_index() 18.3 R Code library(readr) library(dplyr) library(ggplot2) # Load data df &lt;- read_csv(&quot;data/diamonds_sample.csv&quot;) # Bin carat into equal-width intervals and compute mean price df_summary &lt;- df %&gt;% mutate(carat_bin = cut(carat, breaks = 10)) %&gt;% group_by(carat_bin) %&gt;% summarise(mean_price = mean(price), .groups = &quot;drop&quot;) # Convert factor levels to midpoints for plotting df_summary &lt;- df_summary %&gt;% mutate(carat_mid = as.numeric(sub(&quot;\\\\((.+),.+\\\\]&quot;, &quot;\\\\1&quot;, carat_bin)) + as.numeric(sub(&quot;.+,(.+)\\\\]&quot;, &quot;\\\\1&quot;, carat_bin)) / 2) # Plot ggplot(df_summary, aes(x = carat_mid, y = mean_price)) + geom_line() + geom_point() + labs( x = &quot;Carat (binned)&quot;, y = &quot;Mean Price&quot;, title = &quot;Trend of Price by Carat (Binned)&quot; ) + theme_minimal() ✅ Line plots are great for visualizing aggregated trends over an ordered numeric variable — not just time. Binning continuous values helps reveal smooth relationships when raw scatterplots are noisy. "],["how-do-you-visualize-trends-for-multiple-groups-using-a-line-plot.html", "Q&A 19 How do you visualize trends for multiple groups using a line plot? 19.1 Explanation 19.2 Python Code 19.3 R Code", " Q&A 19 How do you visualize trends for multiple groups using a line plot? 19.1 Explanation A line plot is ideal for visualizing trends over an ordered variable. In this example, we compute the average sepal length for each species across sepal width bins. This helps reveal group-specific patterns — for example, whether one species has consistently longer sepals as sepal width increases. 19.2 Python Code import pandas as pd import matplotlib.pyplot as plt import seaborn as sns # Load dataset df = pd.read_csv(&quot;data/iris.csv&quot;) # Bin sepal_width to simulate order df[&quot;width_bin&quot;] = pd.cut(df[&quot;sepal_width&quot;], bins=5) # Group by bin and species, compute mean sepal length grouped = df.groupby([&quot;width_bin&quot;, &quot;species&quot;])[&quot;sepal_length&quot;].mean().reset_index() # Convert bin to string for plotting grouped[&quot;width_bin&quot;] = grouped[&quot;width_bin&quot;].astype(str) # Line plot plt.figure(figsize=(8, 5)) sns.lineplot(data=grouped, x=&quot;width_bin&quot;, y=&quot;sepal_length&quot;, hue=&quot;species&quot;, marker=&quot;o&quot;) plt.title(&quot;Average Sepal Length by Sepal Width Bin and Species&quot;) plt.xlabel(&quot;Sepal Width Bin&quot;) plt.ylabel(&quot;Mean Sepal Length&quot;) plt.xticks(rotation=45) plt.tight_layout() plt.show() /var/folders/m1/0dxpqygn2ds41kxkjgwtftr00000gn/T/ipykernel_75563/1682245456.py:12: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning. grouped = df.groupby([&quot;width_bin&quot;, &quot;species&quot;])[&quot;sepal_length&quot;].mean().reset_index() 19.3 R Code library(dplyr) library(ggplot2) library(readr) # Load dataset df &lt;- read_csv(&quot;data/iris.csv&quot;) # Bin sepal width into 5 intervals df &lt;- df %&gt;% mutate(width_bin = cut(sepal_width, breaks = 5)) # Compute mean sepal length by bin and species grouped &lt;- df %&gt;% group_by(width_bin, species) %&gt;% summarise(mean_length = mean(sepal_length), .groups = &quot;drop&quot;) # Line plot ggplot(grouped, aes(x = width_bin, y = mean_length, group = species, color = species)) + geom_line() + geom_point() + labs( title = &quot;Average Sepal Length by Sepal Width Bin and Species&quot;, x = &quot;Sepal Width Bin&quot;, y = &quot;Mean Sepal Length&quot; ) + theme_minimal() + theme(axis.text.x = element_text(angle = 45, hjust = 1)) ✅ Takeaway: Line plots with grouped trends help you compare patterns side by side — especially when studying how one variable behaves across subgroups. Use color or faceting to highlight these comparisons. "],["how-do-you-show-overall-trend-patterns-using-a-smoothed-line.html", "Q&A 20 How do you show overall trend patterns using a smoothed line? 20.1 Explanation 20.2 Python Code 20.3 R Code", " Q&A 20 How do you show overall trend patterns using a smoothed line? 20.1 Explanation A smoothed trend line is used to show the underlying relationship between two continuous variables. It’s useful when data is noisy and you want to see: General direction of change Nonlinear patterns Local averages (using LOESS or regression smoothing) 20.2 Python Code import pandas as pd import seaborn as sns import matplotlib.pyplot as plt # Load dataset diamonds = pd.read_csv(&quot;data/diamonds_sample.csv&quot;) # Smoothed trend line plt.figure(figsize=(10, 6)) sns.regplot(data=diamonds, x=&quot;carat&quot;, y=&quot;price&quot;, lowess=True, scatter_kws={&quot;alpha&quot;: 0.4}, line_kws={&quot;color&quot;: &quot;#D55E00&quot;}) plt.title(&quot;Smoothed Trend: Carat vs Price&quot;, fontsize=14) plt.xlabel(&quot;Carat&quot;) plt.ylabel(&quot;Price&quot;) plt.tight_layout() plt.show() 20.3 R Code library(readr) library(ggplot2) # Load dataset diamonds &lt;- read_csv(&quot;data/diamonds_sample.csv&quot;) # LOESS smoothed line ggplot(diamonds, aes(x = carat, y = price)) + geom_point(alpha = 0.4) + geom_smooth(method = &quot;loess&quot;, se = TRUE, color = &quot;#D55E00&quot;) + theme_minimal() + labs(title = &quot;Smoothed Trend: Carat vs Price&quot;, x = &quot;Carat&quot;, y = &quot;Price&quot;) ✅ Smoothed trend lines reveal underlying patterns in noisy data. Use them to identify nonlinear growth or saturation points that raw scatter plots may hide. "],["how-do-you-visualize-patterns-and-relationships-in-multivariate-data.html", "Q&A 21 How do you visualize patterns and relationships in multivariate data? 21.1 Explanation", " Q&A 21 How do you visualize patterns and relationships in multivariate data? 21.1 Explanation Once you’ve explored individual variables and group-based comparisons, the next step is to examine how variables relate to one another across the entire dataset. This enables you to uncover: Patterns in how multiple features interact Clustering or separation between groups (e.g., diamond cuts) Correlations that indicate redundancy or strong associations Understanding these relationships is essential for: Feature selection — identifying which variables offer unique insight Model design — anticipating relationships a model might capture Data structure — assessing whether groups are well-separated or overlapping 21.1.1 Key tools for visualizing relationships Method Purpose Pair plots Visualize all-vs-all numeric relationships Facet plots (e.g., histograms, KDEs) Compare distributions side by side across group levels Scatter plots with trend lines Show numeric relationships with group coloring and smoothing Heatmaps Quantify strength of correlation between features Parallel coordinates View high-dimensional feature profiles per case Dimensionality reduction (PCA, UMAP, t-SNE) Project complex data into 2D to visualize structure 21.1.2 👇 Core Questions Explored in This Section How do you uncover relationships between multiple variables using a pair plot? How do you compare distributions across groups using facet plots? How do you enhance scatter plots by adding group color and trend lines? How do you quantify linear relationships between numerical variables using a correlation heatmap? How do you visualize patterns across multiple numeric features using a parallel coordinates plot? How do you uncover structure in high-dimensional data using a PCA plot? How do you visualize clustering patterns in high-dimensional data using a t-SNE plot? How do you explore complex patterns in high-dimensional data using a UMAP plot? Each method helps reveal a different aspect of your dataset’s internal structure. Proceed through the Q&amp;A to explore them interactively. "],["how-do-you-uncover-relationships-between-multiple-variables-using-a-pair-plot.html", "Q&A 22 How do you uncover relationships between multiple variables using a pair plot? 22.1 Explanation 22.2 Python Code 22.3 R Code", " Q&A 22 How do you uncover relationships between multiple variables using a pair plot? 22.1 Explanation A pair plot (or scatterplot matrix) allows you to explore relationships between several numeric variables at once. It shows: Scatter plots for every variable pair Histograms or density plots on the diagonal Optional color (hue) to separate groups It’s useful for spotting correlations, clusters, and outliers in multivariate data. 22.2 Python Code import pandas as pd import seaborn as sns import matplotlib.pyplot as plt # Load dataset diamonds = pd.read_csv(&quot;data/diamonds_sample.csv&quot;) # Select relevant numeric variables + categorical hue subset = diamonds[[&quot;carat&quot;, &quot;depth&quot;, &quot;table&quot;, &quot;price&quot;, &quot;cut&quot;]] # Pair plot sns.set(style=&quot;ticks&quot;) sns.pairplot(subset, hue=&quot;cut&quot;, palette=&quot;Set2&quot;, corner=True) plt.suptitle(&quot;Pair Plot of Diamond Attributes by Cut&quot;, y=1.02) plt.show() 22.3 R Code library(readr) library(GGally) library(dplyr) # Load dataset and sample for speed diamonds &lt;- read_csv(&quot;data/diamonds_sample.csv&quot;) # Pair plot ggpairs(diamonds, aes(color = cut), columns = 1:4, upper = list(continuous = wrap(&quot;points&quot;, alpha = 0.5)), diag = list(continuous = wrap(&quot;densityDiag&quot;)), lower = list(continuous = wrap(&quot;smooth&quot;, alpha = 0.3))) + theme_minimal() ✅ Pair plots are ideal for detecting multivariate patterns. Using color (hue) reveals how groups differ in structure and correlation. "],["how-do-you-compare-distributions-across-groups-using-facet-plots.html", "Q&A 23 How do you compare distributions across groups using facet plots? 23.1 Explanation 23.2 Python Code 23.3 R Code", " Q&A 23 How do you compare distributions across groups using facet plots? 23.1 Explanation Facet plots allow you to split your data into multiple panels based on a categorical variable, making it easier to compare group-specific distributions or relationships without overlap. Unlike standard plots that layer everything into one axis, facet plots: - Create one plot per group, arranged side by side or in a grid - Highlight differences in shape, spread, or skew between categories - Work well with histograms, KDE plots, scatter plots, and more They’re useful for: - Comparing distributions (e.g., KDE or histograms across species or cut) - Analyzing trends across subgroups - Preventing overplotting in dense datasets 23.2 Python Code import pandas as pd import seaborn as sns import matplotlib.pyplot as plt # Load data diamonds = pd.read_csv(&quot;data/diamonds_sample.csv&quot;) # Faceted histogram by &#39;cut&#39; sns.displot(data=diamonds, x=&quot;price&quot;, col=&quot;cut&quot;, bins=30, color=&quot;steelblue&quot;, aspect=0.8) plt.tight_layout() plt.show() # Faceted KDE plot with fill sns.displot(data=diamonds, x=&quot;price&quot;, col=&quot;cut&quot;, kind=&quot;kde&quot;, fill=True, height=3, aspect=1, color=&quot;orchid&quot;) plt.tight_layout() plt.show() 23.3 R Code library(ggplot2) library(readr) # Load data diamonds &lt;- read_csv(&quot;data/diamonds_sample.csv&quot;) # Histogram faceted by cut ggplot(diamonds, aes(x = price)) + geom_histogram(fill = &quot;steelblue&quot;, bins = 30, color = &quot;white&quot;) + facet_wrap(~cut, scales = &quot;free_y&quot;) + theme_minimal() + labs(title = &quot;Price Distribution by Cut&quot;) # KDE faceted by cut ggplot(diamonds, aes(x = price)) + geom_density(fill = &quot;orchid&quot;, alpha = 0.6) + facet_wrap(~cut, scales = &quot;free_y&quot;) + theme_minimal() + labs(title = &quot;Smoothed Price Distribution by Cut&quot;) ✅ Facet plots are ideal for comparing group-specific patterns across a categorical variable. They prevent clutter and make distribution differences easier to detect than overlapping in a single plot. "],["how-do-you-enhance-scatter-plots-by-adding-group-color-and-trend-lines.html", "Q&A 24 How do you enhance scatter plots by adding group color and trend lines? 24.1 Explanation 24.2 Python Code 24.3 R Code", " Q&A 24 How do you enhance scatter plots by adding group color and trend lines? 24.1 Explanation Scatter plots are a go-to tool for visualizing the relationship between two numerical variables. But they become far more insightful when enhanced with: Group-based coloring (e.g., by species or cut) Trend lines to show linear or nonlinear patterns Smoothers (like LOESS or regression fits) Transparency to handle overplotting in dense data These enhancements help: - Detect direction and strength of relationships - Compare group-level trends side by side - Spot outliers or overlapping clusters 24.2 Python Code import pandas as pd import seaborn as sns import matplotlib.pyplot as plt # Load iris data iris = pd.read_csv(&quot;data/iris.csv&quot;) # Scatter with group color and regression lines sns.lmplot(data=iris, x=&quot;sepal_length&quot;, y=&quot;petal_length&quot;, hue=&quot;species&quot;, palette=&quot;Set2&quot;, height=5, aspect=1.2, markers=[&quot;o&quot;, &quot;s&quot;, &quot;D&quot;]) plt.title(&quot;Relationship Between Sepal Length and Petal Length by Species&quot;) plt.tight_layout() plt.show() 24.3 R Code library(ggplot2) library(readr) # Load iris data iris &lt;- read_csv(&quot;data/iris.csv&quot;) # Scatter with group color and regression lines ggplot(iris, aes(x = sepal_length, y = petal_length, color = species)) + geom_point(alpha = 0.7) + geom_smooth(method = &quot;lm&quot;, se = FALSE) + theme_minimal() + labs(title = &quot;Relationship Between Sepal Length and Petal Length by Species&quot;) ✅ Enhancing scatter plots with color and trend lines reveals both overall relationships and how those relationships vary across groups — a key part of visual EDA. "],["how-do-you-quantify-linear-relationships-between-numerical-variables-using-a-correlation-heatmap.html", "Q&A 25 How do you quantify linear relationships between numerical variables using a correlation heatmap? 25.1 Explanation 25.2 Python Code 25.3 R Code", " Q&A 25 How do you quantify linear relationships between numerical variables using a correlation heatmap? 25.1 Explanation A correlation heatmap visually represents the strength and direction of linear relationships between numeric variables using Pearson’s correlation coefficient (r): Values range from -1 (perfect negative) to +1 (perfect positive) Darker or more saturated colors indicate stronger correlations Symmetric across the diagonal (correlation with self = 1) It’s a compact way to assess multicollinearity, feature redundancy, or predictive potential. 25.2 Python Code import pandas as pd import seaborn as sns import matplotlib.pyplot as plt # Load dataset diamonds = pd.read_csv(&quot;data/diamonds_sample.csv&quot;) # Select numerical columns only num_df = diamonds[[&quot;carat&quot;, &quot;depth&quot;, &quot;table&quot;, &quot;price&quot;, &quot;x&quot;, &quot;y&quot;, &quot;z&quot;]] # Compute correlation matrix corr = num_df.corr(numeric_only=True) # Heatmap plt.figure(figsize=(8, 6)) sns.heatmap(corr, annot=True, fmt=&quot;.2f&quot;, cmap=&quot;coolwarm&quot;, center=0) plt.title(&quot;Correlation Heatmap of Diamond Variables&quot;, fontsize=14) plt.tight_layout() plt.show() 25.3 R Code library(readr) library(ggplot2) library(corrplot) # Load dataset diamonds &lt;- read_csv(&quot;data/diamonds_sample.csv&quot;) # Compute correlation matrix num_vars &lt;- diamonds %&gt;% select(carat, depth, table, price, x, y, z) corr_matrix &lt;- cor(num_vars, use = &quot;complete.obs&quot;) # Plot correlation heatmap corrplot(corr_matrix, method = &quot;color&quot;, type = &quot;upper&quot;, addCoef.col = &quot;black&quot;, tl.cex = 0.8, number.cex = 0.7, col = colorRampPalette(c(&quot;blue&quot;, &quot;white&quot;, &quot;red&quot;))(200)) ✅ Correlation heatmaps are a fast and effective way to explore relationships between numerical variables and detect potential feature interactions. "],["how-do-you-visualize-patterns-across-multiple-numeric-features-using-a-parallel-coordinates-plot.html", "Q&A 26 How do you visualize patterns across multiple numeric features using a parallel coordinates plot? 26.1 Explanation 26.2 Python Code 26.3 R Code", " Q&A 26 How do you visualize patterns across multiple numeric features using a parallel coordinates plot? 26.1 Explanation A parallel coordinates plot lets you explore high-dimensional patterns by plotting each feature on a vertical axis. Each observation is a line crossing all axes. It helps you: Spot group patterns across all variables Detect outliers and overlaps Understand feature trends in classification problems Coloring by category (e.g., cut) helps distinguish clusters or groups. 26.2 Python Code import pandas as pd import matplotlib.pyplot as plt from pandas.plotting import parallel_coordinates # Load dataset diamonds = pd.read_csv(&quot;data/diamonds_sample.csv&quot;) # Sample for performance subset = diamonds[[&quot;carat&quot;, &quot;depth&quot;, &quot;table&quot;, &quot;price&quot;, &quot;x&quot;, &quot;y&quot;, &quot;z&quot;, &quot;cut&quot;]].sample(300, random_state=42) # Normalize numeric features normalized = subset.copy() for col in [&quot;carat&quot;, &quot;depth&quot;, &quot;table&quot;, &quot;price&quot;, &quot;x&quot;, &quot;y&quot;, &quot;z&quot;]: normalized[col] = (subset[col] - subset[col].min()) / (subset[col].max() - subset[col].min()) # Parallel coordinates plot plt.figure(figsize=(12, 6)) parallel_coordinates(normalized, class_column=&quot;cut&quot;, color=[&quot;#66c2a5&quot;, &quot;#fc8d62&quot;, &quot;#8da0cb&quot;, &quot;#e78ac3&quot;, &quot;#a6d854&quot;]) plt.title(&quot;Parallel Coordinates Plot: Diamond Features by Cut&quot;) plt.ylabel(&quot;Normalized Value&quot;) plt.xticks(rotation=45) plt.tight_layout() plt.show() 26.3 R Code library(readr) library(GGally) library(dplyr) # Load and sample dataset diamonds &lt;- read_csv(&quot;data/diamonds_sample.csv&quot;) subset &lt;- diamonds %&gt;% select(carat, depth, table, price, x, y, z, cut) %&gt;% sample_n(500) # Normalize numeric columns subset_norm &lt;- subset %&gt;% mutate(across(c(carat, depth, table, price, x, y, z), ~ (. - min(.)) / (max(.) - min(.)))) # Parallel coordinates plot ggparcoord(data = subset_norm, columns = 1:7, groupColumn = 8, scale = &quot;uniminmax&quot;, alphaLines = 0.5) + scale_color_brewer(palette = &quot;Set2&quot;) + theme_minimal() + labs(title = &quot;Parallel Coordinates Plot: Diamond Features by Cut&quot;, x = &quot;Features&quot;, y = &quot;Normalized Value&quot;) ✅ Parallel coordinates plots help you detect patterns across multiple features simultaneously, especially when colored by category. "],["how-do-you-uncover-structure-in-high-dimensional-data-using-a-pca-plot.html", "Q&A 27 How do you uncover structure in high-dimensional data using a PCA plot? 27.1 Explanation 27.2 Python Code 27.3 R Code", " Q&A 27 How do you uncover structure in high-dimensional data using a PCA plot? 27.1 Explanation Principal Component Analysis (PCA) reduces high-dimensional data into 2 or 3 principal axes (components) that preserve the most variance. It helps: Reveal clusters or overlaps in feature space Understand group separation Prepare for clustering or modeling It’s most useful for numeric data and can be colored by group (e.g., cut). 27.2 Python Code import pandas as pd from sklearn.decomposition import PCA from sklearn.preprocessing import StandardScaler import seaborn as sns import matplotlib.pyplot as plt # Load and prepare data diamonds = pd.read_csv(&quot;data/diamonds_sample.csv&quot;) subset = diamonds[[&quot;carat&quot;, &quot;depth&quot;, &quot;table&quot;, &quot;price&quot;, &quot;x&quot;, &quot;y&quot;, &quot;z&quot;, &quot;cut&quot;]].sample(500, random_state=1) # Standardize features X = StandardScaler().fit_transform(subset.drop(&quot;cut&quot;, axis=1)) # PCA transformation pca = PCA(n_components=2) pca_result = pca.fit_transform(X) # Combine with labels pca_df = pd.DataFrame(pca_result, columns=[&quot;PC1&quot;, &quot;PC2&quot;]) pca_df[&quot;cut&quot;] = subset[&quot;cut&quot;].values # Plot plt.figure(figsize=(8, 6)) sns.scatterplot(data=pca_df, x=&quot;PC1&quot;, y=&quot;PC2&quot;, hue=&quot;cut&quot;, palette=&quot;Set2&quot;, alpha=0.7) plt.title(&quot;PCA Plot: Diamond Features Colored by Cut&quot;) plt.tight_layout() plt.show() 27.3 R Code library(readr) library(ggplot2) library(dplyr) # Load and sample diamonds &lt;- read_csv(&quot;data/diamonds_sample.csv&quot;) subset &lt;- diamonds %&gt;% select(carat, depth, table, price, x, y, z, cut) %&gt;% sample_n(500) # PCA features &lt;- subset %&gt;% select(-cut) features_scaled &lt;- scale(features) pca_result &lt;- prcomp(features_scaled) # Combine for plotting pca_df &lt;- data.frame(pca_result$x[,1:2], cut = subset$cut) # Plot ggplot(pca_df, aes(x = PC1, y = PC2, color = cut)) + geom_point(alpha = 0.7) + scale_color_brewer(palette = &quot;Set2&quot;) + theme_minimal() + labs(title = &quot;PCA Plot: Diamond Features by Cut&quot;) ✅ PCA—Principal Component Analysis reduces complexity while preserving patterns. When plotted in 2D, it can reveal clustering, separation, or overlap between groups. "],["how-do-you-visualize-clustering-patterns-in-high-dimensional-data-using-a-t-sne-plot.html", "Q&A 28 How do you visualize clustering patterns in high-dimensional data using a t-SNE plot? 28.1 Explanation 28.2 Python Code 28.3 R Code", " Q&A 28 How do you visualize clustering patterns in high-dimensional data using a t-SNE plot? 28.1 Explanation t-SNE (t-distributed Stochastic Neighbor Embedding) is a nonlinear technique that transforms high-dimensional data into 2D or 3D for visualization. It excels at: - Revealing local clusters and grouping structures - Displaying complex, non-linear relationships - Visualizing high-dimensional feature space t-SNE works best on pre-scaled data and is often used after initial filtering or sampling due to its high computational cost. 28.2 Python Code import pandas as pd from sklearn.manifold import TSNE from sklearn.preprocessing import StandardScaler import seaborn as sns import matplotlib.pyplot as plt # Load and sample data diamonds = pd.read_csv(&quot;data/diamonds_sample.csv&quot;) subset = diamonds[[&quot;carat&quot;, &quot;depth&quot;, &quot;table&quot;, &quot;price&quot;, &quot;x&quot;, &quot;y&quot;, &quot;z&quot;, &quot;cut&quot;]].sample(500, random_state=1) # Standardize numeric features X = StandardScaler().fit_transform(subset.drop(&quot;cut&quot;, axis=1)) # Apply t-SNE tsne = TSNE(n_components=2, perplexity=30, learning_rate=200, random_state=42) embedding = tsne.fit_transform(X) # Prepare dataframe for plotting tsne_df = pd.DataFrame(embedding, columns=[&quot;TSNE1&quot;, &quot;TSNE2&quot;]) tsne_df[&quot;cut&quot;] = subset[&quot;cut&quot;].values # Plot plt.figure(figsize=(8, 6)) sns.scatterplot(data=tsne_df, x=&quot;TSNE1&quot;, y=&quot;TSNE2&quot;, hue=&quot;cut&quot;, palette=&quot;Set2&quot;, alpha=0.7) plt.title(&quot;t-SNE Projection of Diamond Features by Cut&quot;) plt.tight_layout() plt.show() 28.3 R Code library(readr) library(dplyr) library(ggplot2) library(Rtsne) # Load and sample diamonds &lt;- read_csv(&quot;data/diamonds_sample.csv&quot;) subset &lt;- diamonds %&gt;% select(carat, depth, table, price, x, y, z, cut) %&gt;% sample_n(500) # Standardize numeric features X &lt;- scale(subset %&gt;% select(-cut)) # Apply t-SNE set.seed(42) tsne_result &lt;- Rtsne(X, dims = 2, perplexity = 30) # Combine with labels tsne_df &lt;- data.frame(tsne_result$Y) tsne_df$cut &lt;- subset$cut colnames(tsne_df) &lt;- c(&quot;TSNE1&quot;, &quot;TSNE2&quot;, &quot;cut&quot;) # Plot ggplot(tsne_df, aes(x = TSNE1, y = TSNE2, color = cut)) + geom_point(alpha = 0.7) + scale_color_brewer(palette = &quot;Set2&quot;) + theme_minimal() + labs(title = &quot;t-SNE Projection of Diamond Features by Cut&quot;) ✅ t-SNE is powerful for uncovering group-level clusters in high-dimensional data. While slower than PCA or UMAP, it’s excellent for detailed structure exploration in smaller samples. "],["how-do-you-explore-complex-patterns-in-high-dimensional-data-using-a-umap-plot.html", "Q&A 29 How do you explore complex patterns in high-dimensional data using a UMAP plot? 29.1 Explanation 29.2 Python Code 29.3 R Code (UMAP via uwot)", " Q&A 29 How do you explore complex patterns in high-dimensional data using a UMAP plot? 29.1 Explanation UMAP (Uniform Manifold Approximation and Projection) is a nonlinear technique that preserves both local and global structure better than PCA. It’s excellent for: Revealing clusters, manifolds, or nonlinear groupings Visualizing high-dimensional feature behavior in 2D Exploring potential for classification or clustering 29.2 Python Code import pandas as pd from sklearn.preprocessing import StandardScaler import umap import seaborn as sns import matplotlib.pyplot as plt # Load and sample data diamonds = pd.read_csv(&quot;data/diamonds_sample.csv&quot;) subset = diamonds[[&quot;carat&quot;, &quot;depth&quot;, &quot;table&quot;, &quot;price&quot;, &quot;x&quot;, &quot;y&quot;, &quot;z&quot;, &quot;cut&quot;]].sample(500, random_state=1) # Normalize numeric features X = StandardScaler().fit_transform(subset.drop(&quot;cut&quot;, axis=1)) # Run UMAP reducer = umap.UMAP(random_state=42) embedding = reducer.fit_transform(X) # Plot umap_df = pd.DataFrame(embedding, columns=[&quot;UMAP1&quot;, &quot;UMAP2&quot;]) umap_df[&quot;cut&quot;] = subset[&quot;cut&quot;].values plt.figure(figsize=(8, 6)) sns.scatterplot(data=umap_df, x=&quot;UMAP1&quot;, y=&quot;UMAP2&quot;, hue=&quot;cut&quot;, palette=&quot;Set2&quot;, alpha=0.7) plt.title(&quot;UMAP Projection of Diamond Features by Cut&quot;) plt.tight_layout() plt.show() /Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/umap/umap_.py:1952: UserWarning: n_jobs value 1 overridden to 1 by setting random_state. Use no seed for parallelism. warn( 29.3 R Code (UMAP via uwot) library(readr) library(dplyr) library(ggplot2) library(uwot) # Load and sample diamonds &lt;- read_csv(&quot;data/diamonds_sample.csv&quot;) subset &lt;- diamonds %&gt;% select(carat, depth, table, price, x, y, z, cut) %&gt;% sample_n(500) # Standardize features X &lt;- scale(subset %&gt;% select(-cut)) # Apply UMAP set.seed(42) embedding &lt;- umap(X, n_neighbors = 15, min_dist = 0.1) # Combine with labels umap_df &lt;- data.frame(embedding, cut = subset$cut) colnames(umap_df)[1:2] &lt;- c(&quot;UMAP1&quot;, &quot;UMAP2&quot;) # Plot ggplot(umap_df, aes(x = UMAP1, y = UMAP2, color = cut)) + geom_point(alpha = 0.7) + scale_color_brewer(palette = &quot;Set2&quot;) + theme_minimal() + labs(title = &quot;UMAP Projection of Diamond Features by Cut&quot;) ✅ UMAP captures nonlinear patterns in complex datasets, helping you visualize hidden structure, group separations, and feature interactions that PCA may miss. "],["how-do-you-visualize-simple-proportions-using-a-pie-chart.html", "Q&A 30 How do you visualize simple proportions using a pie chart? 30.1 Explanation 30.2 Python Code 30.3 R Code", " Q&A 30 How do you visualize simple proportions using a pie chart? 30.1 Explanation A pie chart represents parts of a whole as slices of a circle. Each slice’s size is proportional to its value, making it easy to visualize category proportions at a glance. Best used when comparing a small number of categories (≤5) Labels or percentages should be clearly shown Not ideal for precise comparisons — bar charts are usually better Use pie charts in: - Survey responses (e.g., favorite colors, device usage) - Market share or budget composition - Simple storytelling visuals 30.2 Python Code import pandas as pd import matplotlib.pyplot as plt data = pd.Series([40, 30, 20, 10], index=[&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;]) plt.figure(figsize=(5, 5)) data.plot.pie(autopct=&#39;%1.1f%%&#39;, startangle=90) plt.title(&quot;Category Proportions&quot;) plt.ylabel(&quot;&quot;) plt.tight_layout() plt.show() 30.3 R Code data &lt;- c(A = 40, B = 30, C = 20, D = 10) pie(data, main = &quot;Category Proportions&quot;, col = rainbow(length(data))) ✅ Pie charts are best used when showing a few categories and emphasizing part-to-whole relationships in a visually simple way. "],["how-do-you-create-a-donut-chart-to-show-part-to-whole-proportions.html", "Q&A 31 How do you create a donut chart to show part-to-whole proportions? 31.1 Explanation 31.2 R Code", " Q&A 31 How do you create a donut chart to show part-to-whole proportions? 31.1 Explanation A donut chart is a variation of the pie chart with a central hole. It helps communicate part-to-whole relationships in a slightly more readable way than standard pie charts. Ideal for categorical variables with a few levels Central space can be used for annotations or percentages import pandas as pd import matplotlib.pyplot as plt df = pd.read_csv(&quot;data/iris.csv&quot;) species_counts = df[&quot;species&quot;].value_counts() colors = plt.cm.Set2.colors plt.pie(species_counts, labels=species_counts.index, colors=colors, autopct=&#39;%1.1f%%&#39;, startangle=90, wedgeprops={&#39;width&#39;: 0.4}) plt.title(&quot;Iris Species Distribution&quot;) plt.axis(&quot;equal&quot;) plt.show() 31.2 R Code library(ggplot2) library(dplyr) df &lt;- readr::read_csv(&quot;data/iris.csv&quot;) df_counts &lt;- df %&gt;% count(species) %&gt;% mutate(prop = n / sum(n), ypos = cumsum(prop) - 0.5 * prop) ggplot(df_counts, aes(x = 2, y = prop, fill = species)) + geom_bar(stat = &quot;identity&quot;, width = 1, color = &quot;white&quot;) + coord_polar(theta = &quot;y&quot;) + xlim(0.5, 2.5) + theme_void() + geom_text(aes(y = ypos, label = scales::percent(prop)), color = &quot;white&quot;) + ggtitle(&quot;Iris Species Distribution (Donut Chart)&quot;) ✅ Donut charts are more stylish than pie charts, but they carry the same limitations—use them only for small, clear part-to-whole comparisons. "],["how-do-you-visualize-hierarchical-part-to-whole-relationships-using-a-treemap.html", "Q&A 32 How do you visualize hierarchical part-to-whole relationships using a treemap? 32.1 Explanation 32.2 Python Code — Interactive 32.3 Python Code — Static 32.4 R Code", " Q&A 32 How do you visualize hierarchical part-to-whole relationships using a treemap? 32.1 Explanation A treemap displays hierarchical data as nested rectangles, where: Size represents a value (e.g., frequency or count) Color can encode an additional group Nested rectangles reflect categories and subcategories 32.2 Python Code — Interactive import pandas as pd import plotly.express as px data = pd.DataFrame({ &quot;group&quot;: [&quot;Setosa&quot;, &quot;Setosa&quot;, &quot;Versicolor&quot;, &quot;Versicolor&quot;, &quot;Virginica&quot;, &quot;Virginica&quot;], &quot;subgroup&quot;: [&quot;Short&quot;, &quot;Long&quot;, &quot;Short&quot;, &quot;Long&quot;, &quot;Short&quot;, &quot;Long&quot;], &quot;value&quot;: [20, 30, 25, 25, 15, 35] }) fig = px.treemap(data, path=[&quot;group&quot;, &quot;subgroup&quot;], values=&quot;value&quot;, color=&quot;group&quot;, title=&quot;Interactive Treemap of Iris Subgroups by Plotly&quot;) fig.show() ⚠️ Interactive treemaps using plotly.express don’t appear in PDFs. Use static alternatives for printable outputs. 32.3 Python Code — Static For use in PDF or non-browser reports, static treemaps built with squarify are ideal. import pandas as pd import matplotlib.pyplot as plt import squarify data = pd.DataFrame({ &quot;label&quot;: [&quot;Setosa Short&quot;, &quot;Setosa Long&quot;, &quot;Versicolor Short&quot;, &quot;Versicolor Long&quot;, &quot;Virginica Short&quot;, &quot;Virginica Long&quot;], &quot;value&quot;: [20, 30, 25, 25, 15, 35] }) colors = plt.cm.viridis_r([i / float(len(data)) for i in range(len(data))]) plt.figure(figsize=(10, 6)) squarify.plot(sizes=data[&quot;value&quot;], label=data[&quot;label&quot;], color=colors, alpha=0.8) plt.axis(&quot;off&quot;) plt.title(&quot;Static Treemap of Iris Subgroups&quot;) plt.tight_layout() plt.show() 32.4 R Code library(treemap) data &lt;- data.frame( group = c(&quot;Setosa&quot;, &quot;Setosa&quot;, &quot;Versicolor&quot;, &quot;Versicolor&quot;, &quot;Virginica&quot;, &quot;Virginica&quot;), subgroup = c(&quot;Short&quot;, &quot;Long&quot;, &quot;Short&quot;, &quot;Long&quot;, &quot;Short&quot;, &quot;Long&quot;), value = c(20, 30, 25, 25, 15, 35) ) treemap(data, index = c(&quot;group&quot;, &quot;subgroup&quot;), vSize = &quot;value&quot;, type = &quot;index&quot;, title = &quot;Treemap of Iris Subgroups&quot;) ✅ Static treemaps are ideal for printed or PDF outputs and help visualize complex category structures compactly. "],["how-do-you-visualize-overlaps-using-a-venn-diagram.html", "Q&A 33 How do you visualize overlaps using a Venn diagram? 33.1 Explanation 33.2 Python Code 33.3 R Code", " Q&A 33 How do you visualize overlaps using a Venn diagram? 33.1 Explanation A Venn diagram shows the overlap and differences between sets. It’s useful for comparing shared vs unique elements among groups. Works best for 2 or 3 sets Clearly shows commonality and uniqueness Use for membership, features, item inclusion 33.2 Python Code from matplotlib_venn import venn2 import matplotlib.pyplot as plt set1 = set([&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;]) set2 = set([&quot;C&quot;, &quot;D&quot;, &quot;E&quot;, &quot;F&quot;]) plt.figure(figsize=(6, 4)) venn2([set1, set2], set_labels=(&quot;Group 1&quot;, &quot;Group 2&quot;)) plt.title(&quot;Venn Diagram of Two Sets&quot;) plt.show() 33.3 R Code library(VennDiagram) venn.plot &lt;- draw.pairwise.venn( area1 = 4, area2 = 4, cross.area = 2, category = c(&quot;Group 1&quot;, &quot;Group 2&quot;), fill = c(&quot;lightblue&quot;, &quot;pink&quot;), ind = FALSE ) grid.draw(venn.plot) ✅ Use Venn diagrams for small set-based comparisons when the goal is to highlight overlap, not quantity. "],["viz-summary.html", "VIZ Summary 📐 What Comes After Visualization? 🚀 Continue Learning with CDI", " VIZ Summary You’ve successfully completed the Data Visualization (VIZ) layer of the CDI Learning System — working hands-on in both Python and R to explore a wide range of visual techniques that transform raw data into meaningful insight. This layer focused on building your data storytelling skills — helping you present information clearly, detect patterns, and support analysis through compelling visuals. 🎨 What You’ve Accomplished ✅ Created basic plots: histograms, bar charts, boxplots, and scatter plots ✅ Enhanced your plots with color, grouping, faceting, and trend lines ✅ Visualized multivariate relationships: pair plots, heatmaps, and parallel coordinates ✅ Explored dimensionality reduction techniques (PCA, t-SNE, UMAP) ✅ Used part-to-whole and structural plots like pie charts, donut charts, treemaps, and Venn diagrams ✅ Practiced on both small (iris) and large (diamonds) datasets ✅ Built fluency across matplotlib, seaborn, ggplot2, GGally, plotly, and more 📐 What Comes After Visualization? Now that you’ve developed your visual intuition, the next step is to quantify relationships — using statistics to draw valid conclusions from your data. In the next stages of your journey, you’ll dive into: 📐 Statistical Analysis (STATS) — measure, test, and explain key patterns 🤖 Machine Learning (ML) — learn from data and make predictions with real-world models Each layer builds on what you’ve already learned — using the same datasets and dual-language structure to deepen your understanding. 🚀 Continue Learning with CDI Ready to take your next step? 📚 Explore All CDI Products → ✅ With your visualization skills in place, you’re now prepared to move from insightful graphics to statistical reasoning and predictive modeling — with confidence in both Python and R. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
